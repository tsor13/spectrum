import os
import sys

import pandas as pd

from spectrum.icl_classes.generic_multivariate import GenericMultivariate
from spectrum.icl_classes.icl_class import geom_and_poisson_iter
from spectrum.icl_classes.individual_multivariate import IndividualMultivariate
from spectrum.icl_classes.single_variable_iid import SingleVariableIID


def generate_numbergame_perc(file_path: str | None = None, **kwargs) -> pd.DataFrame:
    args = {
        "seed": 42,
        # "n_per": 50,
        "n_per": -1,
        "n_iter": geom_and_poisson_iter(128),
    }
    args.update(kwargs)
    if file_path is None:
        file_path = "data/numbergame/numbergame_data.csv"
    data = pd.read_csv(file_path)
    # deduplicate by set, target, and participant
    data = data.drop_duplicates(subset=["set", "target"])
    # multiply p by 100, round to the nearest integer
    data["perc"] = data["p"].apply(lambda x: round(x * 100))
    # turn into string and add %
    data["perc"] = data["perc"].astype(str) + "%"
    # n_unique_sets = data['set'].nunique()
    # print(f"Number of unique sets: {n_unique_sets}")

    data["given_numbers"] = data["set"].apply(
        lambda x: ", ".join([n.strip() for n in x.split("_")])
    )
    data["target_number"] = data["target"].astype(str)

    # multivariate predicting perc given given_numbers and target_number
    multivariate = GenericMultivariate(
        data,
        given_variables=["given_numbers", "target_number"],
        gen_variables=["perc"],
        name="numbergame_perc",
        descriptions=[
            "The following is a number game task. People were shown a set of numbers, and asked whether a target number was likely to be generated by the same process as the set. Your goal is to predict the percentage of people who would say yes to the target number.",
            "Inputs: given_numbers (a set of numbers), target_number (a number which potentially belongs to the set). Outputs: perc (the percentage of people who would say that the target number belongs to the same set).",
        ],
    )
    gens = multivariate.generate_many(**args)
    return gens


def generate_numbergame_individual(
    file_path: str | None = None, **kwargs
) -> pd.DataFrame:
    args = {
        "seed": 42,
        # "n_per": 50,
        # "n_iter": geom_and_poisson_iter(500),
    }
    args.update(kwargs)
    if file_path is None:
        file_path = "data/numbergame/numbergame_data.csv"
    data = pd.read_csv(file_path)
    # map rating to Yes or No
    data["target_belongs_to_set"] = data["rating"].map({0: "No", 1: "Yes"})
    data["given_numbers"] = data["set"].apply(
        lambda x: ", ".join([n.strip() for n in x.split("_")])
    )
    data["target_number"] = data["target"].astype(str)

    # make individual multivariate predicting rating given given_numbers and target_number
    individual_multivariate = IndividualMultivariate(
        data,
        individual_id_column="id",
        given_variables=["given_numbers", "target_number"],
        gen_variables=["target_belongs_to_set"],
        name="numbergame_individual",
    )
    gens = individual_multivariate.generate_many(**args)
    return gens


if __name__ == "__main__":
    from transformers import AutoTokenizer

    tokenizer = AutoTokenizer.from_pretrained("Qwen/Qwen3-0.6B")
    text_format = "special"
    gen_args = {
        "tokenizer": tokenizer,
        "format": text_format,
        "include_description_prob": 1,  # Always include descriptions for better debugging
    }
    # df = generate_numbergame_perc(**gen_args)
    df = generate_numbergame_individual(**gen_args)
    from utils import explore

    explore(df)
